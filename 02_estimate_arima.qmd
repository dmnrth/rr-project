---
title: 02 Estimating ARIMA models (base case)
date: 2024-05-16
---

Loading required packages

```{r}
packages <- c("doParallel", "foreach", "quantmod", "xts")

for (package in packages) {
  if (!require(package, character.only = TRUE)) {
    install.packages(package)
    library(package, character.only = TRUE)
  }
}
```

Loading S&P500 price data

```{r}
sp500_prices <- readRDS("input/sp500_prices.rds")
```

Loading functions used for estimation and forecasting of ARIMA models

```{r}
source("functions/arima_models.R")
```

Estimating ARIMA forecasts for the base case scenario

```{r}
n_splits <- 20 # how many chunks to split the calculation process into

forecast_indexes <- index(sp500_prices[which(index(sp500_prices) == "2005-12-20"):length(sp500_prices)]) # include dates for which we are making forecasts (so from 2005-12-20 to 2019-12-31)

# Initialize parallel computing

num_cores <- detectCores() - 1
cl <- makeCluster(num_cores)
registerDoParallel(cl)

out = foreach (i = 1:n_splits, .errorhandling='pass') %dopar% {
  source("functions/arima_models.R")
  
  split_size <- length(forecast_indexes) %/% n_splits
  
  split_start_date <- forecast_indexes[((i - 1) * split_size + 1)]
  split_end_date <- forecast_indexes[(i * split_size)]
  
  if (i == n_splits) {split_end_date <- forecast_indexes[length(forecast_indexes)]}
  
  arima_forecasts <- arima_rolling_forecast(sp500_prices,
                                            estimation_start_date = paste0(split_start_date),
                                            estimation_end_date = paste0(split_end_date),
                                            progress_bar = FALSE) 
  
  dir.create("output/arima_base_case/", showWarnings = FALSE, recursive = TRUE)
  saveRDS(arima_forecasts,
          file = paste0("output/arima_base_case/",
                        i, "_of_", n_splits, "_", split_start_date, "_", split_end_date ,".rds"))
  return(paste0(split_start_date,"_",split_end_date))
}
print(out)
stopCluster(cl)
```

Estimating ARIMA-GARCH forecasts for the base case scenario

```{r}
n_splits <- 20 # how many chunks to split the calculation process into

forecast_indexes <- index(sp500_prices[which(index(sp500_prices) == "2005-12-20"):length(sp500_prices)]) # include dates for which we are making forecasts (so from 2005-12-20 to 2019-12-31)

# Initialize parallel computing

num_cores <- detectCores() - 1
cl <- makeCluster(num_cores)
registerDoParallel(cl)

out = foreach (i = 1:n_splits, .errorhandling='pass') %dopar% {
  source("functions/arima_models.R")
  
  split_size <- length(forecast_indexes) %/% n_splits
  
  split_start_date <- forecast_indexes[((i - 1) * split_size + 1)]
  split_end_date <- forecast_indexes[(i * split_size)]
  
  if (i == n_splits) {split_end_date <- forecast_indexes[length(forecast_indexes)]}
  
  arima_garch_forecasts <- arima_garch_rolling_forecast(sp500_prices,
                                                      estimation_start_date = paste0(split_start_date), 
                                                      estimation_end_date = paste0(split_end_date),
                                                      progress_bar = FALSE)
  
  dir.create("output/arima-garch_base_case/", showWarnings = FALSE, recursive = TRUE)
  saveRDS(arima_garch_forecasts,
          file = paste0("output/arima-garch_base_case/",
                        i, "_of_", n_splits, "_", split_start_date, "_", split_end_date ,".rds"))
  return(paste0(split_start_date,"_",split_end_date))
}
print(out)

stopCluster(cl)
```