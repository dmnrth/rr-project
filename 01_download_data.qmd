---
title: 01 Downloading data
date: 2024-05-12
---

Loading required packages

```{r}
packages <- c("moments", "quantmod", "xts", "DT", 'tidyverse', 'patchwork')

for (package in packages) {
  if (!require(package, character.only = TRUE)) {
    install.packages(package)
    library(package, character.only = TRUE)
  }
}
```

Downloading S&P500 data

```{r}
start_date <- "2000-01-01"
end_date <- "2020-01-01"

sp500 <- getSymbols("^GSPC",
                    from = start_date,
                    to = end_date,
                    env = NULL)
sp500 <- sp500["2000-01-01/2019-12-30"]
sp500_prices <- sp500$GSPC.Adjusted
sp500_log_returns <- log(sp500$GSPC.Adjusted / lag(sp500$GSPC.Adjusted))
sp500_simple_returns <- (sp500$GSPC.Adjusted / lag(sp500$GSPC.Adjusted) - 1)
```

Calculating descriptive statistics

```{r}
price_stats = tibble(SP500_prices_adj = as.numeric(sp500_prices)) %>% 
  summarise(Min = min(SP500_prices_adj),
            Quartile_1st = quantile(SP500_prices_adj,0.25),
            Median = median(SP500_prices_adj),
            Mean = mean(SP500_prices_adj),
            Quartile_3rd = quantile(SP500_prices_adj,0.75),
            Max = max(SP500_prices_adj),
            Skew = skewness(SP500_prices_adj),
            Kurtosis = kurtosis(SP500_prices_adj) - 3,
            Standard_error = sd(SP500_prices_adj)/sqrt(length(SP500_prices_adj)),
            Standard_deviation = sd(SP500_prices_adj)
            )

ret_stats = tibble(SP500_Log_Returns = as.numeric(sp500_log_returns)) %>% 
  na.omit() %>% 
  summarise(Min = min(SP500_Log_Returns),
            Quartile_1st = quantile(SP500_Log_Returns,0.25),
            Median = median(SP500_Log_Returns),
            Mean = mean(SP500_Log_Returns),
            Quartile_3rd = quantile(SP500_Log_Returns,0.75),
            Max = max(SP500_Log_Returns),
            Skew = skewness(SP500_Log_Returns),
            Kurtosis = kurtosis(SP500_Log_Returns) - 3,
            Standard_error = sd(SP500_Log_Returns)/sqrt(length(SP500_Log_Returns)),
            Standard_deviation = sd(SP500_Log_Returns)
            )

tibble(statistic = colnames(ret_stats), SP500_prices_adj = round(as.numeric(price_stats),4), SP500_Log_Returns = round(as.numeric(ret_stats),4)) %>% 
  datatable() %>% 
  formatRound(columns = c('SP500_prices_adj','SP500_Log_Returns'), digits = 4)
```

Plot of prices and returns

```{r}
p1 = ggplot(fortify(sp500_prices)) +
  geom_line(aes(x=Index, y=GSPC.Adjusted), colour = 'blue') +
  scale_x_date(date_labels = "%d %b %Y") +
  xlab("") +
  ylab("") + 
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank()) +
  ggtitle('S&P500 prices')
p2 = ggplot(fortify(sp500_log_returns)) +
  geom_line(aes(x=Index, y=GSPC.Adjusted), colour = 'darkred') +
  scale_x_date(date_labels = "%d %b %Y") +
  xlab("") +
  ylab("") + 
  theme(axis.title.x=element_blank(),
      axis.text.x=element_blank(),
      axis.ticks.x=element_blank()) + 
  ggtitle('S&P500 log returns')
p3 = ggplot(fortify(sp500_simple_returns)) +
  geom_line(aes(x=Index, y=GSPC.Adjusted), colour = 'darkgreen') +
  scale_x_date(date_labels = "%d %b %Y") +
  xlab("") +
  ylab("") +
  ggtitle('S&P500 simple returns')
p1 / p2 / p3
```

Histogram of log returns

```{r}
ggplot(fortify(na.omit(sp500_log_returns))) + 
  geom_histogram(aes(x = GSPC.Adjusted),binwidth = 0.001, colour = 'blue') +
  ylab('Frequency') + 
  xlab('Log returns') +
  xlim(c(-0.15,0.15))
```

Smoothed density and Q-Q plots

```{r}
p1 = ggplot(fortify(na.omit(sp500_log_returns))) + 
  geom_density(aes(x = GSPC.Adjusted), colour = 'blue') +
  ylab('Density estimate') + 
  xlab('Log returns')

p2 = ggplot(fortify(na.omit(sp500_log_returns))) + 
  geom_qq_line(aes(sample = GSPC.Adjusted), colour = 'red') +
  geom_qq(aes(sample = GSPC.Adjusted), colour = 'black') +
  ylab('Sample Quantiles') + 
  xlab('Theoretical Quantiles')
p1|p2
```

Saving data and deleting unnecessary objects

```{r}
saveRDS(sp500_log_returns,
        file = "input/sp500_log_returns.rds")

saveRDS(sp500_prices,
        file = "input/sp500_prices.rds")


saveRDS(sp500_simple_returns,
        file = "input/sp500_simple_returns.rds")

rm(list = ls())
```
